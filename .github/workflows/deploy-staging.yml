name: Deploy to Staging

on:
  push:
    branches: [main]
    paths:
      - 'terraform/test-files/**'
  workflow_dispatch:
    inputs:
      force_deploy:
        description: 'Force deployment even without changes'
        required: false
        default: false
        type: boolean

env:
  AWS_REGION: us-west-2

jobs:
  build:
    uses: ./.github/workflows/build.yml

  deploy-staging:
    name: Deploy to Staging Environment
    runs-on: ubuntu-latest
    needs: build
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: website-build-${{ github.sha }}
          path: dist/

      - name: Get S3 bucket name from Terraform
        id: get-bucket
        run: |
          echo "🔍 Getting S3 bucket name for staging..."
          
          # Try to get bucket name from Terraform output
          # This assumes the Terraform workspace outputs are available
          BUCKET_NAME=$(aws s3api list-buckets --query "Buckets[?contains(Name, 'portfolio-staging')].Name" --output text)
          
          if [ -z "$BUCKET_NAME" ]; then
            # Fallback to expected naming pattern
            BUCKET_NAME="portfolio-staging-$(date +%Y%m%d)"
            echo "⚠️ Could not detect bucket name, using fallback: $BUCKET_NAME"
          else
            echo "✅ Found staging bucket: $BUCKET_NAME"
          fi
          
          echo "bucket-name=$BUCKET_NAME" >> $GITHUB_OUTPUT

      - name: Deploy to S3
        run: |
          echo "🚀 Deploying website to S3 staging bucket..."
          
          BUCKET_NAME="${{ steps.get-bucket.outputs.bucket-name }}"
          
          # Sync files to S3 with appropriate settings
          aws s3 sync dist/ s3://$BUCKET_NAME/ \
            --delete \
            --cache-control "public, max-age=31536000" \
            --exclude "*.html" \
            --exclude "*.json"
          
          # Upload HTML files with shorter cache (for faster updates)
          aws s3 sync dist/ s3://$BUCKET_NAME/ \
            --delete \
            --cache-control "public, max-age=300" \
            --include "*.html" \
            --include "*.json"
          
          echo "✅ Website files deployed to S3"

      - name: Get CloudFront distribution ID
        id: get-cloudfront
        run: |
          echo "🔍 Getting CloudFront distribution ID for staging..."
          
          BUCKET_NAME="${{ steps.get-bucket.outputs.bucket-name }}"
          
          # Get CloudFront distribution ID for this S3 bucket
          DISTRIBUTION_ID=$(aws cloudfront list-distributions \
            --query "DistributionList.Items[?contains(Origins.Items[0].DomainName, '$BUCKET_NAME')].Id" \
            --output text)
          
          if [ -z "$DISTRIBUTION_ID" ]; then
            echo "⚠️ Could not find CloudFront distribution for bucket: $BUCKET_NAME"
            echo "distribution-id=" >> $GITHUB_OUTPUT
          else
            echo "✅ Found CloudFront distribution: $DISTRIBUTION_ID"
            echo "distribution-id=$DISTRIBUTION_ID" >> $GITHUB_OUTPUT
          fi

      - name: Invalidate CloudFront cache
        if: steps.get-cloudfront.outputs.distribution-id != ''
        run: |
          echo "🔄 Invalidating CloudFront cache..."
          
          DISTRIBUTION_ID="${{ steps.get-cloudfront.outputs.distribution-id }}"
          
          # Create invalidation for all files
          INVALIDATION_ID=$(aws cloudfront create-invalidation \
            --distribution-id $DISTRIBUTION_ID \
            --paths "/*" \
            --query "Invalidation.Id" \
            --output text)
          
          echo "✅ CloudFront invalidation created: $INVALIDATION_ID"
          echo "⏳ Invalidation may take 10-15 minutes to complete"

      - name: Verify deployment
        run: |
          echo "🧪 Verifying staging deployment..."
          
          BUCKET_NAME="${{ steps.get-bucket.outputs.bucket-name }}"
          
          # Check if index.html exists and is accessible
          if aws s3 ls s3://$BUCKET_NAME/index.html; then
            echo "✅ index.html successfully deployed"
          else
            echo "❌ index.html not found in S3 bucket"
            exit 1
          fi
          
          # Get the website URL from bucket info
          REGION=$(aws s3api get-bucket-location --bucket $BUCKET_NAME --query "LocationConstraint" --output text)
          if [ "$REGION" = "None" ]; then
            REGION="us-east-1"
          fi
          
          WEBSITE_URL="http://$BUCKET_NAME.s3-website-$REGION.amazonaws.com"
          echo "🌐 Staging website URL: $WEBSITE_URL"
          
          # Test if website is accessible (basic HTTP check)
          if curl -f -s $WEBSITE_URL > /dev/null; then
            echo "✅ Staging website is accessible"
          else
            echo "⚠️ Website may not be immediately accessible (this is normal)"
          fi

      - name: Deployment Summary
        run: |
          echo "## 🎉 Staging Deployment Complete" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "✅ Website has been successfully deployed to staging!" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📊 Deployment Details" >> $GITHUB_STEP_SUMMARY
          echo "- **Environment**: \`staging\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Commit SHA**: \`${{ github.sha }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- **S3 Bucket**: \`${{ steps.get-bucket.outputs.bucket-name }}\`" >> $GITHUB_STEP_SUMMARY
          
          if [ -n "${{ steps.get-cloudfront.outputs.distribution-id }}" ]; then
            echo "- **CloudFront Distribution**: \`${{ steps.get-cloudfront.outputs.distribution-id }}\`" >> $GITHUB_STEP_SUMMARY
            echo "- **Cache Invalidation**: ✅ Initiated" >> $GITHUB_STEP_SUMMARY
          else
            echo "- **CloudFront Distribution**: ⚠️ Not found" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🔗 Access Your Site" >> $GITHUB_STEP_SUMMARY
          echo "Your staging website will be available shortly at the configured CloudFront URL." >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Note**: Cache invalidation may take 10-15 minutes to complete." >> $GITHUB_STEP_SUMMARY 