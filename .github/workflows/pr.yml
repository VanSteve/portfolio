name: Pull Request Validation

on:
  pull_request:
    branches: [main]
    types: [opened, synchronize, reopened]

# No environment variables needed since we only validate Terraform syntax

jobs:
  # Build and validate website
  build:
    uses: ./.github/workflows/build.yml

  # Basic file checks
  file-checks:
    name: File Quality Checks
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Check file permissions
        run: |
          echo "🔍 Checking file permissions..."
          
          # Check for executable files that shouldn't be
          EXECUTABLE_FILES=$(find . -type f \( -name "*.html" -o -name "*.css" -o -name "*.js" -o -name "*.json" -o -name "*.md" -o -name "*.yml" -o -name "*.yaml" \) -executable -not -path "./.git/*" || true)
          
          if [ -n "$EXECUTABLE_FILES" ]; then
            echo "❌ Found executable files that should not be executable:"
            echo "$EXECUTABLE_FILES"
            exit 1
          else
            echo "✅ File permissions are correct"
          fi

      - name: Check for sensitive files
        run: |
          echo "🔍 Checking for sensitive files..."
          
          # Check for common sensitive file patterns
          SENSITIVE_FILES=$(find . -type f \( -name "*.pem" -o -name "*.key" -o -name "*.p12" -o -name "*.pfx" -o -name ".env" -o -name ".env.local" -o -name ".env.production" \) -not -path "./.git/*" || true)
          
          if [ -n "$SENSITIVE_FILES" ]; then
            echo "❌ Found potential sensitive files:"
            echo "$SENSITIVE_FILES"
            echo "Please remove these files or add them to .gitignore"
            exit 1
          else
            echo "✅ No sensitive files detected"
          fi

  # Security scanning (minimal for static site)
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Scan for secrets
        run: |
          echo "🔍 Scanning for potential secrets..."
          
          # Basic regex patterns for common secrets
          if grep -r -i -E "(password|secret|key|token|api_key)" terraform/test-files/ 2>/dev/null; then
            echo "⚠️ Found potential secrets in website files - please review"
          else
            echo "✅ No obvious secrets found in website files"
          fi

  # Terraform validation
  terraform-validation:
    name: Terraform Validation
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: "~1.0"

      - name: Terraform Format Check
        run: |
          echo "🔍 Checking Terraform formatting..."
          terraform fmt -check -recursive terraform/
          echo "✅ Terraform formatting is correct"

      - name: Terraform Validation (All Environments)
        run: |
          echo "🔍 Validating all Terraform environments..."
          
          for env in dev staging prod; do
            echo "Validating $env environment..."
            cd terraform/environments/$env
            terraform init -backend=false
            terraform validate
            cd ../../..
            echo "✅ $env environment is valid"
          done

  # Accessibility testing
  accessibility-test:
    name: Accessibility Testing
    runs-on: ubuntu-latest
    needs: build
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: website-build-${{ github.sha }}
          path: dist/

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install accessibility testing tools
        run: |
          npm install -g @axe-core/cli serve

      - name: Start local server
        run: |
          echo "🚀 Starting local server for accessibility testing..."
          serve dist -l 3000 &
          sleep 5
          curl http://localhost:3000 || exit 1
          echo "✅ Local server is running"

      - name: Run accessibility tests
        run: |
          echo "♿ Running accessibility tests with axe-core..."
          axe http://localhost:3000 --exit
          echo "✅ Accessibility tests passed"

  # Performance testing
  performance-test:
    name: Performance Testing
    runs-on: ubuntu-latest
    needs: build
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: website-build-${{ github.sha }}
          path: dist/

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install Lighthouse CLI
        run: npm install -g @lhci/cli

      - name: Install serve
        run: npm install -g serve

      - name: Start local server
        run: |
          echo "🚀 Starting local server for performance testing..."
          serve dist -l 3000 &
          sleep 5

      - name: Run Lighthouse CI
        run: |
          echo "⚡ Running Lighthouse performance tests..."
          lhci autorun --upload.target=temporary-public-storage --collect.url=http://localhost:3000
          echo "✅ Performance tests completed"

  # Summary job
  pr-validation-summary:
    name: PR Validation Summary
    runs-on: ubuntu-latest
    needs: [build, file-checks, security-scan, terraform-validation, accessibility-test, performance-test]
    if: always()
    
    steps:
      - name: Generate PR validation summary
        run: |
          echo "## 🎯 Pull Request Validation Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📊 Test Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Check job statuses
          if [ "${{ needs.build.result }}" = "success" ]; then
            echo "✅ **Build**: Passed" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Build**: Failed" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [ "${{ needs.file-checks.result }}" = "success" ]; then
            echo "✅ **File Quality**: Passed" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **File Quality**: Failed" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [ "${{ needs.security-scan.result }}" = "success" ]; then
            echo "✅ **Security Scan**: Passed" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Security Scan**: Failed" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [ "${{ needs.terraform-validation.result }}" = "success" ]; then
            echo "✅ **Terraform Validation**: Passed" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Terraform Validation**: Failed" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [ "${{ needs.accessibility-test.result }}" = "success" ]; then
            echo "✅ **Accessibility**: Passed" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Accessibility**: Failed" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [ "${{ needs.performance-test.result }}" = "success" ]; then
            echo "✅ **Performance**: Passed" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Performance**: Failed" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Overall status
          if [ "${{ needs.build.result }}" = "success" ] && \
             [ "${{ needs.file-checks.result }}" = "success" ] && \
             [ "${{ needs.security-scan.result }}" = "success" ] && \
             [ "${{ needs.terraform-validation.result }}" = "success" ] && \
             [ "${{ needs.accessibility-test.result }}" = "success" ] && \
             [ "${{ needs.performance-test.result }}" = "success" ]; then
            echo "### 🎉 All checks passed! This PR is ready for review." >> $GITHUB_STEP_SUMMARY
          else
            echo "### ⚠️ Some checks failed. Please review and fix the issues above." >> $GITHUB_STEP_SUMMARY
          fi